Much of this document was written by David on how to calibrate the display.  There may be errors and omissions as this was typed up nearly a year since I last did a full system calibration. Honestly, we started this documentation and software development with the very best of intentions.

=Main Calibration steps=
* Focal calibration and Positioning monitors
** Entering appropriate information into software
** Note that the software as it is currently designed doesn't like big distances.  For vision science experiments that are based in diopters, there are simple transformations that require prism rotations and lens changes.
* Geometrical undistortion of display
* Gamma correction of displays
* Prism calibration
* bite bar calibration
* size calibration
** binocular size calibration
* vergence calibration
* individual depth plane calibrations
* QuickCheck for alignment

=Cautions=
* This code is flexible about using the furthest image plane because it is the lowest quality (see the optics express 2009 MTF analysis.)
** All the calibration procedures can be done on the Far_mid plane instead of the far plane.  
** When Far_mid plane is used as the farthest plane, different calibration files should be used. This will be noted in each step. Just to summarize,
*** In focal calibration, you do not have to care about the smallest (farthest) square.
*** In binocular size calibration, exp_iodrects_Far_mid_plane should be used instead of exp_iodrects.
*** In the alignment calibration, exp_2 should be used instead of exp_1.
*** In per person calibration, the order of the calibration will be exp_3L, exp_4L, exp_3R, and exp_4R. Note that exp_2L and exp_2R should not be performed.
** There are some important status updates and warnings that get printed to the command window.  When you are figuring out how things work, please check the command window text for asterisks.  It might alert you to a problem.

=Main concept for the calibration including why it works=

==Lens reset triggering==
Only do this adjustment if there is a specific problem of the focal states not registering to the display focal states.  This won't fix dropped frames but will allow you to ensure display-lens synchronization via the photodiodes.  

As the refresh rate of the monitor goes up, the luminance of each frame of the image will go down, and vis versa.  This means that changes to the monitor, stimulus flash on screen, or refresh rate changes may cause the display to no longer send a clear signal to the lens controllers.  The trigger controller box contains inputs for photodiodes attached to the two screens, and filters the signal and emits a pulse when the signal is above threshold.  This should be set as short as possible so that the switch happens quickly.  If it is long, then it may still be switching part way into the next image.  Tweak the offsets to make the pulse short, but not too short or it disappears.  The offsets are potentiometers on the right and left sides of the trigger box.  In the subversion directory with the code, I have uploaded a file written by Andy Kirby on how the circuit works.  The adjustments needed should be very, very small.  Only a quarter turn of the screw.

==Hardware alignment==

===Lens element alignment===
Inside the aluminum lens holder there are a number of optical elements.  The first 1 or 2 are typically ophthalmic lenses.  Unless one of them is a cylindrical lens (which I cannot for the life of me imagine why you would do this, any astigmatism in an observer should be corrected in the spectacle plane) the rotation of these lenses is unimportant.  The other five elements are very important.
Their order is
# polarizer
# FLC 1
# BF lens 1
# FLC 2
# BF lens 2
The goal of the optical component calibration is to make the FLC oriented at 45 degrees to the polarizer, so it can rotate the polarization to 0 of 90 deg through the lens.  Then the lens must be oriented so that the polarized light goes through its principal axis.  The same goes for the second FLC and lens.  An imperfect alignment results in a focal power ghost.  This is most noticeable by a change in the image size of the ghost.

===Hardware direction alignment===
During this complex part of the calibration, all the optics components need to be aligned so that people can effectively view imagery through the system.  The lens assemblies connect to the modified amblyoscope by some aluminum brackets.  These brackets are slotted with washers.  This allows a rather large amount of flexibility in how the lenses are mounted.  The height can be adjusted, the lateral position can be slightly tweaked, and there is a tiny ability to actuate a few degrees of Z rotation.  If when viewing through the lenses, a horizontal line appears slanted, this is probably where the problem is.  One of the biggest problems with this stage is that what works for one person may not work for another.  I (David) found that my nose touched the lens assemblies in a configuration that provided adequate clearance for Takashi and Joohwan.  
Although it may not be possible, the goal of this process is to position the center of rotation of the eye directly over the pivot points of the amblyoscope.  One way to facilitate this is when doing the sighting alignment of the bite bar calibration, ask the observer to pitch is head down.  This moves the eyes slightly more foreward and the nose slightly backwards.  
Also during the hardware alighnment, the lenses need to be centered in front of the eyes, and the prism angles calibrated to provide a known vergence in conjuntion with the amblyoscope arm angles.  

===Focal power calibration - locating monitor and finding correction lens power===
The lenses are precision ground to exact radii of curvature.  However, they are thick lenses, not in the same plane, and there are FLC elements that are between them.  So predicting what the focal states will be theoretically is not easy.  Therefore an empirical technique is needed.  I found a technique using a telescope which is effective at collapsing the depth of field so that one can actually measure what the focal state is.  There is just inadequate brightness to make images on screens and measure distances.  In the Keating Physical and Geometric optics, there is an excellent derivation for how telescopes magnify images by their rated power but magnify the defocus by the square of their rated power.

Joohwan and Takashi modified the system so that it could accept two lenses at the front of the system.  This allows for more precise changes in overall accommodative demand, but for very fine adjustments (<0.25 D) the monitor distance can be adjusted. This allows us to locate the monitor at as same distance as possible. You do not have to worry about the image size because it will be calibrated by software in later step.

Note that the correction lens is sitting at fairly far location from the lens of the eye. It means that if you want to shift the whole condition by a focal power of a certain amount, you should introduce larger additional focal power than the certain amount. So what we recommend is to measure every focal power of your condition. What we do not recommend is that you measure the focal power of one set of conditions, and then just assume that another set of conditions, which is say a 2.5 D shifted version of the former one, will be accomplished merely by adding 2.5 D more focal power to the correction lens.

===Prism calibration===
The main step of prism calibration is to calibrate the vernier controller at the bottom of the prism mount. The prism mount is attached on the amblyoscope and located behind the aluminum lens holder. First, we attach the prism at the desired location. For now (2009/09/16), the prism is locating at as far from the observer as possible to provide observer maximum space because some observers (ex: David) have difficulty with fitting in. Unfortunately, the number on the vernier controller is not matched to the orientation angle of the prism. In fact, it is practically impossible because even if the number on the vernier scale is produced to be matched with the orientation angle, there is no guarantee that we can attach the prism at the desired location with extremely fine precision. Even a smallest amount of location error can introduce a significant difference in the number on the vernier scale for the same orientation of the prism. Therefore, we find a one-to-one correspondence between the number on the vernier scale and the orientation angle of the prism. To do this, we first read the number on the vernier scale for specific situations in which the prism orientation can be calculated. Based on the findings, we make a table of correspondence through more calculation.

==Display Undistortion==
When CRTs operate at very high refresh rates, the raster can adopt significant spatial distoritions.  The entire image can appear pincushioned or have barrel distortion.  Often these are noticeable monocularly.  Even if they are not, subtle distortions could be noticeable binocularly.  
By following the geometric calibration steps, you will make a map of the CRTs distortions at a 1 cm scale.  Then the software will take the distorted image an remap it to a rectilinear grid.  This process uses GPU subroutines that cause only a minimal delay in the presentation cycle.  Furthermore, much of this custom code is now embedded in the psychtoolbox mex files, so a call to flip (if calibration is active) will automatically implement the undistortion. 

==Gamma calibration==
In order for blending to work, intensity of the light between adjacent image planes must be distributed according to the depth weighted blending algorithim, also known as depth filtering.  The computer by default converts intensity values to perceptual units via the gamma curve.  This means that the perceptual difference between 0 and 0.1 is approximately the same as 0.9 and 1.0, although in a physical metric like cd/m^2, 0 to 0.1 might be 1 to 4 cd/m^2, and 0.9 to 1 might be 80 to 100 cd/m^2.  

The gamma calibration linearizes the gamma response via a look up table so that specifying an intensity of 0.5 produces half as many cd/m^2 as an intensity of 1 and twice as many cd/m^2 as 0.25 intensity.

==Software Calibration==
A multitude of undesirable hardware traits can be patched with software solutions.  However, in order for the patches to fit well, there needs to be very careful initial calibration work.  If this is done carefully, then individual observers need only do a few short steps to get aligned in the system.  

===Vergence Calibration===
The coarse vergence alignment should be achieved with adjustments of the haploscope arms and the prism microstages.  But, for fine tuning the disparity, the software can adjust the vergence state.  The idea of this step is that if you can view contents through the lenses with parallel gaze, you should be able to orient an object directly in front of the lens so that it appears in the center of the viewing aperture.  This step will also allow us to correct any vertical vergence errors.  

===Size and disparity calibration===
Differences in the monitor distance and significant magnification from the lenses can change sizes substantially.  We calibrate the size by placing an object of known size on the screen and view it with one eye directly, without the lens present.  Then we adjust the size of a computer generated image in the other eye's image so that it has the same size.  Then we reverse the process to calibrate the other eye's size.  We only need to be concerned with the size of one lens state at this time as soon we will do a calibration across focal states.  
This process is critical to two things.  It allows us to show objects with known spatial properties.  It also allows us to know that our disparity magnitudes are correct.  A small scaling error in the image size due to magnification would disrupt how large the disparities we present.  
===Depth plane alignment===
The switchable lens can change the image magnification and introduce subtle translations.  We correct these in software by performing vernier alignment across depth planes.  This step is particularly important for making sure that blended images superimpose.  It also is very important for making sure that occluding edges do not appear overly bright or dark.  Kurt Akeley's thesis describes some of the reasons why this method is so effective.

After completing the depth plane alignment, there is a quick little test that the observers can run to make sure it is a good alignment.  This is a quick test that can eliminate the heartache later of having done an experiment with misaligned image planes.

=Detailed procedures=
* These steps worked at one time, but the code changes, so make sure that you check things as you go and the expected fields change at the conclusion of each calibration.  The logic for determining whether to save a calibration result has gotten very complicated so check the end of BF_display_start to make sure that the calibrations have been saved to a file.  You should have a nice message printed to the command window when the program exits and the calibration data is saved.  

==Lens element calibration==
Hopefully the lenses will already be in rotary alignment, and there will be black sharpy marks that show what the correct positions should be.  If not, here are the instructions from Andy on how to do the proper calibration.
 The alignment procedure is a rather tedious iterative one, I'm
 afraid.  You may find it easier if you put the display in a very 
 low refresh rate mode.  The coarse adjustment is fairly quick:
 1) disconnect flc2 from electronics
 2) put polariser in arbitrary position.
 3) move 1st flc until no flicker is observed (or is minimised) - 
 the FLC is aligned with the 1st polariser.  The ideal position is
  ~45 degrees away from this point - move it to this.
 4) move lens 1 until the maximum flicker/minimum ghosting is 
 observed
 5) reconnect flc2 and move until no difference is observed from 
 at step 4 - flc 2 is approx. aligned with (or orthogonal to) the
 initial polariser.  Ideal position is ~45 deg. away from this 
 positon, so move it to that.
 6) adjust lens 2 to maximise flicker/minimise ghosting.

==Geometrical Undistortion of CRTs ==
* The CRT displays introduce a spatial distortion to the images put on screen.
* A straight line in software may not appear straight on the screen
* We have a graphical calibration routine that allows us to undistort the CRT so that lines appear straight
** The banks lab has integrated a piece of software into the psychtoolbox
*** Please read the psychtoolbox documentation "help DisplayUndistortionBVL"
**** This software was written by David Hoffman, Bjorn Vlaskamp, Ben Backus, Chris Burns and Andrew Falth
**** Mario Kleiner cleaned it up and added it to the psychtoolbox low level graphics handling calls
**** This means that the display undistorts behind the scenes with little fuss
* A SPATIAL CALIBRATION IS ONLY GOOD FOR A SPECIFIC REFRESH RATE AND RESOLUTION
*** We have also seen a drift in spatial calibration over a period of months
*** It also changes as the monitors warm up, so make sure you don't start until the display has been running for a while
** The calibration routine must be repeated if you want to change the resolution or refresh rate
** Remove the switchable lenses from the system and place the "loom" in front of one of the CRTs
*** If you are modifying an existing calibration file the procedure is easiest.
*** Type "DisplayUndistortionBVL([], 'name of the existing calibration file.mat')"
*** This loads the last set of known dot positions, and will probably be better than starting from scrath
*** If the dot size is to big or too small then you will manually need to adjust the dot size in the manual calibrate subroutine, the parameter is dotDiam (or something like that)  
**** You want the dot to be big enough that you can see it if it partially occluded by the loom wires but small enough that you can acurately center it up behind the loom wire intersections.
===Instructions for doing the calibration itself===
*** Note: This probably should not be done through the lens system (for more info, see comment at end of spatial calibration section)
*** The default adjustment is to move a dot by 1/10th of a pixel, which is too small to notice usually. 
*** Press the middle button of the mouse to adjust the adjustment increment, it loops if you go too far
*** If no dots are selected then you will be making global distortions
**** to select the global distortion, press the right mouse button quickly and it flashes the adjustment
**** These adjustment include translation, pincussion/barrel, expansion, shear, trapezoid
**** Use the arrow keys to adjust each of the parameters
**** It will only modify the x or y coordinate at a time, so it will do either y or x barrel as you press the up/down or right/left keys
**** This is a good first step to get the rough dots into position, but the important part is the fine tuning
*** Fine Tuning
**** To select one or a group of dots to do a precision translation, left click and hold and drag a box around the dots you would like to modify
**** Then use the arrow keys to translate them
**** Again, the dots will be adjusted by the adjustment unit set by the middle mouse button
**** Once you are happy with the dot positions, click the right mouse button to deselect all dots. 
**** Repeat this procedure for all the dots (Maybe skipping ones at the edges that are not visible anyways)
*** Once you are happy with everything, it is time to save the file.
**** Press escape and the file will be saved
**** It will be saved to the path that is printed to the command window of Matlab.  It will be something really obscure burried deep in the computer such as:
 /Users/[the account name]/Library/Preferences/Psychtoolbox/GeometryCalibration/BVLCalibdata_0_800_600.mat
**** The 0 represents the screen number, the 800 by 600 is the screen resolution
**** It does not say what the refresh rate was for the display, so I recommend modifying the file name so that it has the calibration date, right/left monitor, and the refresh rate
***** This file can then be copied to the PTBlayers folder with the display software.  
**** Tell the BFDisplay code to use the new calibration file by chaning the calibration files in BF_Display_Start
**** If you need to do more calibration, then put in this new calibration file name into the DisplayUndistortionBVL command
** Adjust the dots in the calibration tool so that the dots are behind the loom wire intersections
** When you quit out, the settings are saved to a .mat file
** Rename the .mat file with the resolution, refresh rate, which monitor, and the date
** Repeat for the other monitor
** It will probably take a few hours per display
* When you have the files, move them to the BF display directory and change BF_disp_Start so that it uses the new calibration data.  
** Also make sure to add the .mat files with the calibration data to the SVN server, as this is very valuable informaiton
* This process may seem very tedious and it is.  However, the geometrical distortions can be quite severe and it is worth the effort to do this right.  Chris Burns a programmer that was with us until 2007 who worked on this calibration routine in C, used to describe something like this:  Zen and the art of calibration.  Take deep breath... hold it... click mouse... drag mouse... release mouse click and exhale... press an arrow key with each exhalation... you get the idea.  Consider yourself fortunate that the latency is no longer 2-3 seconds.

===A problem with this technique===
* One aspect of this calibration that I (David) have been disatisfied with is that it corrects the display distortion but not the lens distortion
** The calcite lenses introduce their own spatial distortions to the images.  James Gao and David measured this using the SLR camera and were able to see some barrel distortion from the lenses.
** The proper way of doing this calibration is to set up a video camera (with no or well characterized spatial distortion properties) and align the points on a secondary display off the camera feed.
*** This would compensate for monitor distortions and the lens distortions
*** As of June 2009, we have not done the calibration this way, and lens distortions remain.  
**** This is probably not a very serious issue for small stimuli like random dot stereograms, but full field straight lines may introduce problems.

==Gamma calibration==
* Gamma is the relationship of software specified brightness, and the luminance of the display
* Computers are seldom 1:1 brightness to luminance functions, or having gamma of 1
** Macs typically have a gamma of approximately 1.81.  This means that the luminance function of a display is approximately (commanded brightness)^gamma
** This is normally a good thing as discriminable changes in dark level are much finer than the discriminable levels of bright luminance changes.
* However, in our display we use depth weighted blending.  This relies on blending the intensity of an object across the adjacent depth planes.  
*** If gamma is not linearized then when an object is at one plane, and is at full intensity, it has luminance 1^gamma.
*** If it is at the dioptric midpoint between planes, then it would have intensity (0.5)^gamma+(0.5)^gamma
**** 2*(0.5)^gamma /= 1^gamma
* To properly account for this we linearize the gamma for the display.  
** We use the photometer to measure each display's gamma curve.  
*** Borrow the Minolta photometer from Marcus Bearse in fourth floor of Minor Hall
*** Use Matlab to present full screen patches of varied intensity.

 %open window, load clut
 win = screen('OpenWindow',1,1,[],8);
 luminance=0
 while luminance>=0 &&luminance<=255
 screen('FillRect',win,[luminance luminance luminance],[])
 screen('Flip',win);
 luminance=input('What luminance do you want?')
 end
 screen CloseAll
**** Just type in a pixel intensity 0-255 in integers and then record the brightness with the photometer
**** I go by changes of 10, but make sure to do 255 also  
****** e.g. 0, 10, 20, 30, 40... 240, 250, 255
*** When you're finished fit the data and compute gamma
**** I will have a program there to help do this, but quickly... take the log of the input, and a log of the output and fit a line to it.  The slope of the line is the gamma.
* To actually linearize the display you will need to make a lookup table.  The code to make the lookup table is saved as BF_gama_CLUT_maketable_tool.m.  It is checked into the source control server along with other important files for the program.
** To use it you will need to put in the values of what you told the monitor to present and what the photometer outputs.  It should all be self explanatory.  Just be careful about running it as it will overwrite the existing gamma tables.
*** Also to do this properly, each color should be done independently.  I did it only for luminance so there could be some subtle chromatic shifts as there is no guarantee that all colors have identical gamma.
**The table says how to map the software intensity to the hardware intensity.  The table is just a 3*256 table of what intensity values to substitute in.  
*** I think this gamma stuff should be fairly stable so it doesn't need to be recalibrated often

==Focal Power calibration==
* The focal distance states of the lens system must be measured empirically
* The thin lens approximation do not apply as the lenses are separated, and thus there are magnification changes and focal power does not add linearly.
** Stored in the cabinet near the display is a compact monocular.  This 8X telescope magnifies images 8 times, and all collapses the depth focus by 8^2, or 64 times.  
** A defocus of 0.5 diopters will lead to 32 diopters of defocus through the monocular.
*** use tropicamide to knock out your accommodation in the eye that will be sighting through the monocular.  
*** Use exp_demo to put up the letter acuity charts.
**** Sometimes the demo will put up acuity charts that are partially occluded by others.  If this is the case, then the sign of the IPD can be switched in the observer file so that charts are better spread out.
*** using the monocular as close to the BF lenses as possible, focus on one of the letter acuity charts
*** Once the chart is in sharp focus, do not touch the focus dial.  Sit back with the monocular and measure the distance to which the monocular is focused.  
**** I did this by putting a page of text on the floor and aimed the monocular moved by head up and down until I found the distance to which the monocular was focused, and measured this distance using a ruler.  
**** The empirical measurement I made summer 2008 revealed that the planes were not spaced uniformly.

==Vergence calibration - includes locating monitor & calibrating prism==
* For the simplicity of explanation, Cartesian coordinate is used in describing directions. For an observer looking straightly the haploscope, z-axis is along with the longitudinal direction from the observer, x-axis and y-axis are horizontal and vertical directions in transversal plane. The origin is at the midpoint between two centers of prisms when the arms are at 0 degrees.
* During the calibration, use this bmp file as a whole screen size image displayed on the monitor. There are white lines two of them crosses at the center of the displaying area. Even though the point where two center lines cross do not coincide with the center of the monitor structure itself, the point will be referred to as the center of the monitor. It is more important to deal with the center of the displaying area than the center of the structure.
* Locating monitor
** This calibration starts with the distance between the monitor to the aluminum lens mount found from the former step, focal power calibration.
** For the given distance, the optimum monitor location can be calculated analytically. There are two criteria and one assumption used in the calculation.
*** Criterion 1: When the observer looks through the centers of birefringent lenses, the line of sight should meet the center of the monitor.
*** Criterion 2: The angles at which the lines of sight meet the surface of the monitor in all situations should be as close to right angle as possible.
** This calculation can be converted to an analytical problem using least square error method. Detailed thinking process and geometry for the calculation are described in [[monitor location and orientation calculation]] page. The monitor position & orientation are calculated to satisfy above two criteria using this m-file attached. 
* Amblyoscope calibration
** Loosen screws on the scale mark.
** Align two arms as straight as possible by making them parallel with the x-axis.
** Without touching the arms, place the scale mark so that the scale beam points at 0 degree. Fasten the screw.
* Prism calibration
** The laser using method turned out to be inaccurate because the lens is not at perfectly perpendicular to the optic axis of itself.
** Instead, we use 0 D of vergence condition and the observer sits far from the lens mount. With this situation, we can minimize the error of prism orientation.
** We can calculate the orientation angle of the prism of two extreme cases when the observer is looking at the farthest or closest lines with the amblyoscope at 0 degree.
** Read the number on the vernier scale of the prism mount for those two extreme cases.
** Calculate the ratio between the orientation angle and the number on the vernier scale.
** Produce a table such as [[Media:Angle list 20090806.xlsx|this excel file]] which tells correspondence between the vernier number and the combination of IPD and vergence.

==Some Notes on Software calibration==
* One of the first steps is to choose if you would like to calibrate for 3 or 4 image planes.  All 4 image planes work, but the 4th has measurably lower quality as we plot in the optics express document.  
** If you are attempting to calibrate only the three near image planes, then you can skip all steps that deal with calibration plane 1. 
*** I'm starting to label some of the test files for use with calibrating the third plane, but it is tricky.  Also, be careful because I may call the Far-mid plane the "third plane" but it is the second plane in the software's numbering convention.  Check, check, check, check!
**** Check the documentation (congratulations, you have done the first step if you're reading this)
**** Check the software (open the test files and make sure that the numbers entered there make sense)
**** Check the monitor (there are software tools to help you do this, including a slow switch mode that puts up text saying what is going on) but the telescope and ruler are your friends... Just don't trust the ruler too much as many things are calibrated for a large spectacle magnification, and may even change between lens states.
**** Check the observer parameter file.  There should be a new timestamped set of calibration settings.  The values of those settings should be different than those above it in a logical way.
* Magnification calibration
** First do Joohwan's steps to adjust the hardware so that the lines of sight through the lenses intersect the center of the display.  This involves adjusting the haploscope arms and the prism mounts.
** Ensuring the images are the same size in each eye
*** To measure the absolute angular size of an object, measure the distance from the eye to the monitor.
*** Remove the lens system for one of the eyes and for that eye tape a piece of paper to the screen with a known angular size.
*** Use the test file exp_1.m (When using the Far_mid plane, use exp_2.m)
*** Set the angular size to the size of the physical angular size object
**** This should be set in BFRenderScene_static
***** The angular size of the object will be the size of the glRotation commands
*** Use the arrow keys to align the center lines in the opposite eyes with the central corner of the standard
*** Press 'e' on the keyboard to toggle which eye is being adjusted.
*** Press 'm' to switch between adjusting the central lines and the eccentric lines (the ones that set magnification)
*** Use the arrow keys to adjust the lines such that they are the correct size for the reference standard.
*** When finished, switch to the other eye, replace the lens system and adjust the eye that previously was not using the lens.
*** When you are finished adjusting, escape the program and the new parameter settings will be saved to the subject's parameter file
**** Check the command window for a message saying that the settings have been saved and check the data file to see that there are new timestamped calibration settings in the file.  
** Calibrating an object to appear with correct software vergence
*** Adjust the prisms and haploscope arms and prisms so that it is configured to show an object at 0 vergence distance
*** Run the program with the observer initials and the experiment exp_iodrects (exp_iodrects_Far_mid_plane when Far_mid_plane is used).
**** This program puts up a stimulus of two objects texured with a crosshair that are side by side separated by an IPD distance.  
***** Note:  I originally wrote these instructions assuming that we wanted real life distances (a table-top sized workspace)
****** In the visual fatigue experiment we changed things so that we would be showing objects at infinity, this meant that we modified iodrects to show a single object at the specified distance.  With the eyes in parallel gaze, this one target should be in the center of each viewing window... (may not make sense yet but read the steps and hopefully it will) 
***** The right crosshair target should appear directly in front of the right lens system.  
***** The left crosshair target should appear directly in front of the left lens system.
**** Bring in the bite bar alignment sighting device and set it up about 1 meter behind the BF display, and make sure it is lined up well.  Possibly using a laser.  
***** At this distance, the crosshair should fill the aperture of the lenses.  
****** Use the arrow keys to position the crosshair at the center of the aperture for one eye at a time.
****** Use the 'e' key to switch between which eyes you are adjusting
***** Again, upon exiting the program, it will save the new alignment positions to the subject parameter file.

== per subject alignment of depth planes==
* If an observer starts with a blank subject file, the default parameters will be the start values for the alignment.
** For depth blending to work, the image planes must be properly registered with one another.  This requires a spatial offset and a magnification change.
*** All of these manipulations are done with subtle changes to the viewing frustum
*** An easy to use calibration procedure for each observer is available and should be used for each observer prior to the beginning of the experiment.  
**** REMEMBER TO ADJUST THE HAPLOSCOPE BASE TO THE CORRECT IPD
**** After the haploscope base and mirrors are correctly configured
***** exp_2L  Aligns the far-mid plane to the far plane (Do not run it when Far_mid plane is used)
***** exp_3L  Aligns the mid-near plane to the far-mid plane
***** exp_4L  Aligns the near plane to the mid-near plane
***** exp_2R  Aligns the far-mid plane to the far plane (Do not run it when Far_mid plane is used)
***** exp_3R  Aligns the mid-near plane to the far-mid plane
***** exp_4R  Aligns the near plane to the mid-near plane
**** It is important to do these tests in order.  Each calibration should align the adjusted plane to a plane that is in the correct position, and going out of order will not work at all.
**** These tests present a series of vernier lines.  
***** One of the lines will have a tab on it, and the other will not have a tab
***** If the lines are oriented vertically, then the observer must respond if the line without a tab is to the right or left of the line with the tab.  They respond using the arrow keys.
***** If the lines are oriented horizontally, they should respond if the untabed line is above or below the one with the tab.  Again they should respond with the arrow keys.
***** If the observer can't tell which is up/down, left/right, then they must guess 
***** If the lines are not collinear by the end of the session, it can be repeated. 
*** The vertically oriented lines that do not appear in the center of the viewing frustum are used to calculate the magnification change of the lens system.
*** This procedure is closely based on the alignment procedure that Kurt Akeley developed for the 3 mirrors volumeteric display.
* Quick test of the alignment
** When you are finished running through the alignment tests, run the program "exp_3plane_aligntest.m"
*** This program puts up a square at the dioptric midpoint of the Near-NearMid images planes, and a square at the dioptric midpoint of the two middle image planes.  
**** I didn't bother with a third one between the farthest image planes because we are not using it anyways.
*** If an observer sees the two boxes clearly, then the alignment is good.
*** If the observer sees the boxes as double, different size, excessively blurry, etc. Then the alignment is bad and it should be redone. 
*** If only one eye seems to be affected, then only that eye needs to be re calibrated.  
** This procedure should probably be used before every experimental session.

==How the software uses the calibration files==
* The program loads and looks at the specified observer's file
* It will read the absolute size of the screen and all the offsets that make each depth plane properly align with their neghboring depth planes.  
* The way to start a new observer, is to copy another observer's file, preferably a trusted observer's file, and change the IPD.  Also delete all the calibration settings except for those of the last session.  
** The files are script files that just keep getting appended over and over again so there is a complete record of all the incremental calibration steps.  Its a lazy version of an undo function.  
* The major calibration for size and absolute vergence probably only need to be done seldom, however, make sure to frequently redo the calibration settings for regular subjects if you are showing blended imagery.  If the track that the bite bar rests on shifts, or a lens gets bumped, or a persons teeth shift even a tiny bit, it can disrupt the alignment of the depth planes, and depth filtering will look lousy.  Its worth the extra effort to get it right the first time.

==Major Code Revisions on August 24 2009==
* Joohwan and David take the code to ICU (Intensive care unit)
* To make the code more flexible for dealing with funny situations, such as not using the far image plane, and allowing for the switching of ophthalmic lenses in the display
* The biggest change is that Default params is NO MORE.  The contents are scattered through the code now.  Much of it is in the beginning of the BF_display_Start
* Think of documentation more of "just a guideline" at this point.
** Joohwan is already working on cleaning it up.
